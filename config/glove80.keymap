/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_sv.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

&lt {
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
    hold-trigger-on-release;
};

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        ctrl_backspace: ctrl_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_BACKSPACE";
            bindings = <&kp LC(BACKSPACE)>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_sentence_end: dot_sentence_end {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SENTENCE_END";
            bindings = <&kp DOT>, <&sentence_end>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        backspace_nav: backspace_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE_NAV";
            bindings = <&mo>, <&ctrl_backspace>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <69>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        next_window_K: next_window_K {
            compatible = "zmk,behavior-mod-morph";
            label = "NEXT_WINDOW_K";
            bindings = <&kp K>, <&alt_tab>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        previous_window_J: previous_window_J {
            compatible = "zmk,behavior-mod-morph";
            label = "PREVIOUS_WINDOW_J";
            bindings = <&kp J>, <&shift_alt_tab>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        underscore_minus: underscore_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDERSCORE_MINUS";
            bindings = <&kp UNDERSCORE>, <&kp KP_MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        parenthesis_previous_tab: parenthesis_previous_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "PARENTHESIS_PREVIOUS_TAB";
            bindings = <&kp LPAR>, <&previous_tab>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        parenthesis_next_tab: parenthesis_next_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "PARENTHESIS_NEXT_TAB";
            bindings = <&kp RPAR>, <&next_tab>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        comma_exclemation: comma_exclemation {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_EXCLEMATION";
            bindings = <&kp COMMA>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        previous_window_bracket: previous_window_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "PREVIOUS_WINDOW_BRACKET";
            bindings = <&kp LEFT_BRACE>, <&previous_window_J>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        left_paren_bracket: left_paren_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_PAREN_BRACKET";
            bindings = <&kp LPAR>, <&kp LBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT)>;
        };

        right_paren_bracket: right_paren_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_PAREN_BRACKET";
            bindings = <&kp RPAR>, <&kp RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        left_brace_croco: left_brace_croco {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_BRACE_CROCO";
            bindings = <&kp LBRC>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        right_brace_croco: right_brace_croco {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_BRACE_CROCO";
            bindings = <&kp RBRC>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        sentence_end: sentence_end {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LEFT_SHIFT>;
            label = "SENTENCE_END";
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp TAB>;
            label = "ALT_TAB";
        };

        shift_alt_tab: shift_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &kp LEFT_ALT &kp TAB>;
            label = "SHIFT_ALT_TAB";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp C>;
            label = "COPY";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp X>;
            label = "CUT";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp V>;
            label = "PASTE";
        };

        undo: undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp Z>;
            label = "UNDO";
        };

        redo: redo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp Y>;
            label = "REDO";
        };

        next_workspace: next_workspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LEFT_WIN &kp RIGHT>;
            label = "NEXT_WORKSPACE";
        };

        previous_workspace: previous_workspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LEFT_WIN &kp LEFT_ARROW>;
            label = "PREVIOUS_WORKSPACE";
        };

        next_tab: next_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp TAB>;
            label = "NEXT_TAB";
        };

        previous_tab: previous_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LEFT_SHIFT &kp TAB>;
            label = "PREVIOUS_TAB";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F2            &kp F3        &kp F4         &kp F5       &kp F6                                                                                                                                 &kp F7             &kp F8               &kp F9                &kp F10             &kp F11
&kp F1            &kp NUMBER_1  &kp N2         &kp N3       &kp N4   &kp N5                                                                                                     &kp N6             &kp N7             &kp N8               &kp N9                &kp N0              &kp F12
&kp SLASH         &kp B         &kp L          &kp D        &kp W    &kp Z                                                                                                      &kp SV_A_RING      &kp U              &kp I                &kp O                 &kp SV_O_UMLAUT     &kp EQUAL
&kp ESC           &kp N         &kp R          &kp T        &kp S    &kp G                                                                                                      &kp Y              &kp H              &kp A                &kp E                 &kp L               &comma_exclemation
&kp SINGLE_QUOTE  &kp Q         &kp X          &kp M        &kp C    &kp V   &kp TAB             &kp DOWN          &kp UP          &kp LEFT_ARROW  &kp RIGHT       &kp ENTER    &dot_sentence_end  &kp P              &kp J                &kp K                 &kp SV_A_UMLAUT     &kp SEMI
&mo 3             &kp HOME      &kp PAGE_DOWN  &kp PAGE_UP  &kp END          &backspace_nav 2 0  &kp LEFT_CONTROL  &kp LEFT_WIN    &kp LEFT_ALT    &kp LEFT_SHIFT  &lt 1 SPACE                     &left_brace_croco  &left_paren_bracket  &right_paren_bracket  &right_brace_croco  &underscore_minus
            >;
        };

        SYMBOL {
            bindings = <
&none      &none      &none      &none           &none                                                                                   &none           &none               &none         &none         &none
&none      &kp GRAVE  &kp LPAR   &kp RPAR        &kp SEMI    &kp COMMA                                                           &none   &none           &none               &none         &none         &none
&kp EXCL   &kp LBRC   &kp APOS   &kp DQT         &kp RBRC    &kp QMARK                                                           &none   &kp LEFT_SHIFT  &kp LCTRL           &kp LEFT_ALT  &kp LEFT_WIN  &trans
&kp POUND  &kp CARET  &kp EQUAL  &kp UNDERSCORE  &kp DOLLAR  &kp STAR                                                            &none   &kp BACKSPACE   &kp SPACE           &kp TAB       &kp ENTER     &trans
&kp TILDE  &kp LT     &kp PIPE   &kp MINUS       &kp GT      &kp FSLH   &kp NUBS     &kp DOT    &kp STAR    &none  &none  &none  &trans  &kp DELETE      &kp LC(LEFT_SHIFT)  &none         &none         &trans
&kp AT     &kp AMPS   &kp LBKT   &kp RBKT        &kp PLUS               &kp PERCENT  &kp COLON  &kp SEMI    &none  &none  &none          &trans          &trans              &trans        &trans        &trans
            >;
        };

        NAVIGATION {
            bindings = <
&none  &none         &none         &none      &none                                                                       &none                &none           &none         &none            &none
&none  &none         &none         &none      &none           &none                                                &none  &none                &none           &none         &none            &none
&none  &none         &undo         &redo      &kp BACKSPACE   &cut                                                 &none  &kp HOME             &previous_tab   &next_tab     &kp END          &none
&none  &kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &copy                                                &none  &previous_workspace  &shift_alt_tab  &alt_tab      &next_workspace  &none
&none  &none         &none         &none      &none           &paste  &none  &none  &none    &none  &none  &trans  &none  &kp LEFT_ARROW       &kp DOWN        &kp UP_ARROW  &kp RIGHT        &none
&none  &none         &none         &none      &none                   &none  &none  &none    &none  &none  &trans         &none                &none           &none         &none            &none
            >;
        };

        MAGIC_LAYER {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none  &none  &none  &none  &none
&none        &none            &none            &none            &none            &none                                                               &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
