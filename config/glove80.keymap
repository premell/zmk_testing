/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_sv.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

&lt {
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
    hold-trigger-on-release;
};

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        ctrl_backspace: ctrl_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_BACKSPACE";
            bindings = <&kp LC(BACKSPACE)>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_sentence_end: dot_sentence_end {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SENTENCE_END";
            bindings = <&kp SV_DOT>, <&sentence_end>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        backspace_nav: backspace_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE_NAV";
            bindings = <&mo>, <&ctrl_backspace>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <69>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        next_window_K: next_window_K {
            compatible = "zmk,behavior-mod-morph";
            label = "NEXT_WINDOW_K";
            bindings = <&kp K>, <&alt_tab>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        previous_window_J: previous_window_J {
            compatible = "zmk,behavior-mod-morph";
            label = "PREVIOUS_WINDOW_J";
            bindings = <&kp J>, <&shift_alt_tab>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        underscore_minus: underscore_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDERSCORE_MINUS";
            bindings = <&kp SV_UNDERSCORE>, <&kp SV_MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        parenthesis_previous_tab: parenthesis_previous_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "PARENTHESIS_PREVIOUS_TAB";
            bindings = <&kp LPAR>, <&previous_tab>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        parenthesis_next_tab: parenthesis_next_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "PARENTHESIS_NEXT_TAB";
            bindings = <&kp RPAR>, <&next_tab>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        comma_exclemation: comma_exclemation {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_EXCLEMATION";
            bindings = <&kp SV_COMMA>, <&kp SV_EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        previous_window_bracket: previous_window_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "PREVIOUS_WINDOW_BRACKET";
            bindings = <&kp LEFT_BRACE>, <&previous_window_J>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        left_paren_bracket: left_paren_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_PAREN_BRACKET";
            bindings = <&kp SV_LPAR>, <&kp SV_LBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT)>;
        };

        right_paren_bracket: right_paren_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_PAREN_BRACKET";
            bindings = <&kp SV_RIGHT_PARENTHESIS>, <&kp SV_RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        left_brace_croco: left_brace_croco {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_BRACE_CROCO";
            bindings = <&kp SV_LEFT_BRACE>, <&kp SV_LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        right_brace_croco: right_brace_croco {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_BRACE_CROCO";
            bindings = <&kp SV_RIGHT_BRACE>, <&kp SV_GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL)>;
        };

        equal_plus: equal_plus {
            compatible = "zmk,behavior-mod-morph";
            label = "EQUAL_PLUS";
            bindings = <&kp SV_EQUAL>, <&kp SV_PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        semi_comma: semi_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_COMMA";
            bindings = <&kp SV_SEMICOLON>, <&kp SV_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        appostroph_quote: appostroph_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "APPOSTROPH_QUOTE";
            bindings = <&kp SV_SQT>, <&kp SV_DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        slash_question: slash_question {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_QUESTION";
            bindings = <&kp SV_SLASH>, <&kp SV_QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        backspace_shift: backspace_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE_SHIFT";
            bindings = <&kp>, <&backspace>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        backspace: backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE";
            bindings = <&kp BACKSPACE>, <&kp LC(BACKSPACE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        sentence_end: sentence_end {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LEFT_SHIFT>;
            label = "SENTENCE_END";
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp TAB>;
            label = "ALT_TAB";
        };

        shift_alt_tab: shift_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &kp LEFT_ALT &kp TAB>;
            label = "SHIFT_ALT_TAB";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp C>;
            label = "COPY";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp X>;
            label = "CUT";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp V>;
            label = "PASTE";
        };

        undo: undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp Z>;
            label = "UNDO";
        };

        redo: redo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp Y>;
            label = "REDO";
        };

        next_workspace: next_workspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LEFT_WIN &kp RIGHT>;
            label = "NEXT_WORKSPACE";
        };

        previous_workspace: previous_workspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LEFT_WIN &kp LEFT_ARROW>;
            label = "PREVIOUS_WORKSPACE";
        };

        next_tab: next_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp TAB>;
            label = "NEXT_TAB";
        };

        previous_tab: previous_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LEFT_SHIFT &kp TAB>;
            label = "PREVIOUS_TAB";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F2          &kp F3        &kp F4         &kp F5       &kp F6                                                                                                          &kp F7    &kp F8  &kp F9  &kp F10          &kp F11
&kp F1          &kp NUMBER_1  &kp N2         &kp N3       &kp N4   &kp N5                                                                                  &kp N6         &kp N7    &kp N8  &kp N9  &kp N0           &kp F12
&kp SV_SLASH    &kp B         &kp L          &kp D        &kp W    &kp Z                                                                                   &kp SV_A_RING  &kp SV_F  &kp O   &kp U   &kp SV_O_UMLAUT  &kp APOSTROPHE
&kp LEFT_SHIFT  &kp N         &kp R          &kp T        &kp S    &kp G                                                                                   &kp Y          &kp H     &kp A   &kp E   &kp I            &kp SV_COMMA
&kp ESC         &kp Q         &kp X          &kp M        &kp C    &kp V   &kp TAB  &kp DOWN       &kp UP          &kp LEFT_ARROW  &kp RIGHT  &kp ENTER    &none          &kp P     &kp J   &kp K   &kp SV_A_UMLAUT  &kp SV_DOT
&mo 4           &kp HOME      &kp PAGE_DOWN  &kp PAGE_UP  &kp END          &mo 1    &kp BACKSPACE  &kp LEFT_WIN    &kp LEFT_ALT    &kp LCTRL  &lt 3 SPACE                 &none     &none   &none   &none            &none
            >;
        };

        symbol_2 {
            bindings = <
&kp SV_AT           &none              &none                    &none                     &none                                                                                       &none          &none      &none  &none  &none
&kp SV_PIPE         &kp SV_AMPERSAND   &kp SV_LEFT_BRACKET      &kp SV_RIGHT_BRACKET      &kp SV_BACKSLASH    &none                                                            &none  &none          &none      &none  &none  &none
&kp SV_EXCLAMATION  &kp SV_COLON       &kp SV_LEFT_PARENTHESIS  &kp SV_RIGHT_PARENTHESIS  &kp SV_SEMICOLON    &kp SV_QUESTION                                                  &none  &none          &none      &none  &none  &none
&kp SV_POUND        &kp SV_LEFT_BRACE  &kp SV_EQUAL             &kp SV_UNDERSCORE         &kp SV_RIGHT_BRACE  &kp SV_STAR                                                      &none  &kp BACKSPACE  &kp ENTER  &none  &none  &trans
&kp SV_TILDE        &kp SV_CARET       &kp SV_SINGLE_QUOTE      &kp SV_DOUBLE_QUOTES      &kp SV_DOLLAR       &kp SV_SLASH     &none  &none  &none    &none  &none  &kp ENTER  &none  &none          &none      &none  &none  &trans
&kp SV_GRAVE        &kp SV_LT          &kp SV_PLUS              &kp SV_MINUS              &kp SV_GT                            &none  &none  &none    &none  &none  &kp SPACE         &none          &none      &none  &none  &none
            >;
        };

        SYMBOL {
            bindings = <
&none               &none         &none                    &none                     &none                                                                                                               &none           &none               &none         &none         &none
&none               &kp SV_GRAVE  &kp SV_LEFT_PARENTHESIS  &kp SV_RIGHT_PARENTHESIS  &kp SV_SEMICOLON  &kp SV_COMMA                                                                              &none   &none           &none               &none         &none         &none
&kp SV_EXCLAMATION  &kp SV_LBRC   &kp SV_APOSTROPHE        &kp SV_DOUBLE_QUOTES      &kp SV_RBRC       &kp SV_QUESTION                                                                           &none   &kp LEFT_SHIFT  &kp LCTRL           &kp LEFT_ALT  &kp LEFT_WIN  &trans
&kp SV_POUND        &kp SV_CARET  &kp SV_EQUAL             &kp SV_UNDERSCORE         &kp SV_DOLLAR     &kp SV_STAR                                                                               &none   &kp BACKSPACE   &kp SPACE           &kp TAB       &kp ENTER     &trans
&kp SV_TILDE        &kp SV_LT     &kp SV_PIPE              &kp SV_MINUS              &kp SV_GT         &kp SV_SLASH     &kp SV_BACKSLASH  &kp SV_DOT    &kp SV_STAR         &none  &none  &none  &trans  &kp DELETE      &kp LC(LEFT_SHIFT)  &none         &none         &trans
&kp SV_AT           &kp SV_AMPS   &kp SV_LBKT              &kp SV_RBKT               &kp SV_PLUS                        &kp SV_PERCENT    &kp SV_COLON  &kp SV_SEMICOLON    &none  &none  &none          &trans          &trans              &trans        &trans        &trans
            >;
        };

        NAVIGATION {
            bindings = <
&none  &none         &none         &none      &none                                                                          &none                   &none            &none         &none              &none
&none  &none         &none         &none      &none           &none                                                   &none  &none                   &none            &none         &none              &none
&none  &none         &kp LC(Z)     &kp LC(Y)  &kp BACKSPACE   &kp LC(X)                                               &none  &kp HOME                &kp LS(LC(TAB))  &kp LC(TAB)   &kp END            &none
&none  &kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &kp LC(C)                                               &none  &kp LC(LG(LEFT_ARROW))  &kp LA(LS(TAB))  &kp LA(TAB)   &kp LC(LG(RIGHT))  &none
&none  &none         &none         &none      &none           &kp LC(V)  &none  &none  &none    &none  &none  &trans  &none  &kp LEFT_ARROW          &kp DOWN         &kp UP_ARROW  &kp RIGHT          &none
&none  &none         &none         &none      &none                      &none  &none  &none    &none  &none  &trans         &none                   &none            &none         &none              &none
            >;
        };

        MAGIC_LAYER {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none  &none  &none  &none  &none
&none        &none            &none            &none            &none            &none                                                               &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
